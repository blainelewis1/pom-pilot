{"version":3,"sources":["constants.js","notify.js","actions.js","reducer.js","configureStore.js","google.js","Layout.js","Settings.js","Timer.js","utils.js","Controls.js","TimerInterface.js","Notifier.js","App.js","serviceWorker.js","timerManager.js","index.js"],"names":["MILLISECONDS_IN_A_MINUTE","TIMER_SOUNDS","window","Notification","permission","requestPermission","START_TIMER","SET_PURPOSE","SETUP_TIMER","TIMER_COMPLETE","NOTIFY","ADD_TO_CALENDAR","SET_POM_LENGTH","SET_BREAK_LENGTH","SET_NOTIFICATIONS","SET_TIMER_SOUND","SET_GOOGLE_CLIENT_ID","SET_GOOGLE_ENABLED","SET_GOOGLE_SIGNED_IN","SET_GOOGLE_CALENDAR","SET_COLOR","ENQUEUE_SNACKBAR","REMOVE_SNACKBAR","startTimer","type","timerComplete","dispatch","getState","timer","completed","audio","_getState","_getState$settings","settings","notifications","timerSound","_getState$timer","notified","completedAt","completedALongTimeAgo","Date","now","requireInteraction","addEventListener","pause","Audio","play","addToCalendar","setupTimer","timerValues","startedAt","minTime","enqueueSnackbar","notification","Object","objectSpread","key","getTime","Math","random","removeSnackbar","initialState","length","purpose","addedToCalendar","pomLengthInMinutes","breakLengthInMinutes","googleApiKey","googleClientId","googleEnabled","googleSignedIn","googleCalendar","colors","pom","breaking","action","combineReducers","state","arguments","undefined","value","newTimerState","defineProperty","colorType","concat","toConsumableArray","filter","configureStore","persistedState","localStorage","getItem","JSON","parse","store","createStore","reducer","applyMiddleware","logger","thunk","subscribe","setItem","stringify","gapi","Splotch","styled","div","_templateObject","_ref","color","DISCOVERY_DOCS","SCOPES","GoogleCalendarList","_ref2","props","esm_extends","_useState","useState","_useState2","slicedToArray","calendars","setCalendars","useEffect","client","calendar","calendarList","list","getPromise","then","data","Promise","resolve","result","items","react_default","a","createElement","index_es","assign","select","label","margin","variant","fullWidth","disabled","map","_ref3","id","summary","primary","GoogleColorList","_ref4","_useState3","_useState4","setColors","get","calendarId","keys","event","background","_ref5","initClient","init","clientId","process","REACT_APP_GOOGLE_CLIENT_ID","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","catch","error","message","options","size","onClick","signIn","aria-label","Close_default","formatDate","d","setMilliseconds","toJSON","events","insert","resource","colorId","start","dateTime","end","e","console","log","load","CenteredPaper","Paper","Layout_templateObject","TopRight","_templateObject2","ClosableModal","children","objectWithoutProperties","component","Link","to","Typography","TypographyImp","Settings_templateObject","Grid","GridImp","Settings_templateObject2","handleAuthClick","handleSignoutClick","signOut","connect","google","onSetBreakLength","onSetPomLength","onSetNotifications","onSetTimerSound","onSetGoogleClientId","onSetGoogleEnabled","onSetGoogleCalendar","onSetColor","history","_ref$colors","Layout_ClosableModal","open","onClose","push","container","spacing","item","xs","gutterBottom","checked","onChange","target","Fragment","title","Help_default","google_GoogleCalendarList","md","google_GoogleColorList","href","InputProps","endAdornment","position","soundUrl","control","Container","Timer_templateObject","Purpose","Timer_templateObject2","PurposeTextField","TextField","_templateObject3","onSetPurpose","timerStarted","actionStarted","forceUpdate","set","useForceUpdate","callback","delay","savedCallback","useRef","lastRun","current","setInterval","timeNow","clearInterval","useInterval","displayTime","p","setPurpose","max","minutes","floor","seconds","timeString","toString","padStart","document","autoFocus","multiline","placeholder","onKeyPress","preventDefault","Controls_templateObject","onStartPom","onStartBreak","onStartAction","Controls_Container","TimerInterface","src_Timer","src_Controls","Notifier","displayed","storeDisplayed","_this","_ref$notifications","newSnacks","currentSnacks","this","notExists","_loop","i","_this2","_this$props$notificat","forEach","includes","React","Component","bindActionCreators","withSnackbar","App","Settings_default","Route","path","Settings","src_Notifier","Boolean","location","hostname","match","manageTimers","theme","createMuiTheme","typography","useNextVariants","palette","grey","secondary","lightBlue","ReactDOM","render","styles","react_redux_es","build","autoHideDuration","HashRouter","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdefd1ef.chunk.js","sourcesContent":["export const MILLISECONDS_IN_A_MINUTE = 60 * 1000;\nexport const TIMER_SOUNDS = [\"alarm.mp3\"];\n","import { NOTIFY } from \"./actions\";\nimport { MILLISECONDS_IN_A_MINUTE } from \"./constants\";\n\nif (window.Notification) {\n  if (window.Notification.permission === \"default\") {\n    window.Notification.requestPermission();\n  }\n}\n\nexport default function notify() {\n  return function(dispatch, getState) {\n    let {\n      settings: { notifications, timerSound },\n      timer: { notified, completedAt }\n    } = getState();\n\n    let completedALongTimeAgo =\n      Date.now() - completedAt > MILLISECONDS_IN_A_MINUTE * 10;\n\n    if (!notified && !completedALongTimeAgo) {\n      let audio;\n      if (notifications && window.Notification) {\n        let notification = new Notification(\"Your time is up!\", {\n          requireInteraction: true\n        });\n\n        notification.addEventListener(\"close\", () => {\n          if (audio) {\n            audio.pause();\n          }\n        });\n      }\n\n      if (timerSound) {\n        audio = new Audio(timerSound);\n        audio.play();\n      }\n      dispatch({ type: NOTIFY });\n    }\n  };\n}\n","import { MILLISECONDS_IN_A_MINUTE } from \"./constants\";\nimport notify from \"./notify\";\nimport { addToCalendar } from \"./google\";\n\nexport const START_TIMER = \"START_TIMER\";\nexport const SET_PURPOSE = \"SET_PURPOSE\";\nexport const SETUP_TIMER = \"SETUP_TIMER\";\nexport const TIMER_COMPLETE = \"TIMER_COMPLETE\";\nexport const NOTIFY = \"NOTIFY\";\nexport const ADD_TO_CALENDAR = \"ADD_TO_CALENDAR\";\n\nexport const SET_POM_LENGTH = \"SET_POM_LENGTH\";\nexport const SET_BREAK_LENGTH = \"SET_BREAK_LENGTH\";\nexport const SET_NOTIFICATIONS = \"SET_NOTIFICATION\";\nexport const SET_TIMER_SOUND = \"SET_TIMER_SOUND\";\nexport const SET_GOOGLE_CLIENT_ID = \"SET_GOOGLE_CLIENT_ID\";\nexport const SET_GOOGLE_ENABLED = \"SET_GOOGLE_ENABLED\";\nexport const SET_GOOGLE_SIGNED_IN = \"SET_GOOGLE_SIGNED_IN\";\nexport const SET_GOOGLE_CALENDAR = \"SET_GOOGLE_CALENDAR\";\nexport const SET_COLOR = \"SET_COLOR\";\nexport const ENQUEUE_SNACKBAR = \"ENQUEUE_SNACKBAR\";\nexport const REMOVE_SNACKBAR = \"REMOVE_SNACKBAR\";\n\nexport function startTimer() {\n  return { type: START_TIMER };\n}\n\nexport function timerComplete() {\n  return function(dispatch, getState) {\n    if (!getState().timer.completed) {\n      dispatch({ type: TIMER_COMPLETE });\n      dispatch(notify());\n      dispatch(addToCalendar());\n    }\n  };\n}\n\nexport function setPurpose(value) {\n  return function(dispatch, getState) {\n    dispatch({ type: SET_PURPOSE, value });\n    if (!getState().timer.startedAt) {\n      dispatch(startTimer());\n    }\n  };\n}\n\nexport function setupTimer(timerValues) {\n  return function(dispatch, getState) {\n    if (\n      getState().timer.startedAt &&\n      Date.now() - getState().timer.startedAt > getState().settings.minTime\n    ) {\n      dispatch({ type: TIMER_COMPLETE });\n      dispatch(addToCalendar());\n    }\n\n    dispatch({ type: SETUP_TIMER, timerValues });\n  };\n}\n\nexport function startBreak() {\n  return function(dispatch, getState) {\n    dispatch(\n      setupTimer({\n        startedAt: Date.now(),\n        type: \"breaking\",\n        length:\n          getState().settings.breakLengthInMinutes * MILLISECONDS_IN_A_MINUTE,\n        purpose: \"Break\"\n      })\n    );\n    dispatch(startTimer());\n  };\n}\n\nexport function startPom() {\n  return function(dispatch, getState) {\n    dispatch(\n      setupTimer({\n        startedAt: null,\n        type: \"pom\",\n        length:\n          getState().settings.pomLengthInMinutes * MILLISECONDS_IN_A_MINUTE\n      })\n    );\n  };\n}\n\nexport function startAction() {\n  return function(dispatch) {\n    dispatch(\n      setupTimer({\n        startedAt: Date.now(),\n        length: 0,\n        type: \"action\"\n      })\n    );\n  };\n}\n\nexport function setPomLength(value) {\n  return { type: SET_POM_LENGTH, value };\n}\n\nexport function setNotifications(value) {\n  return { type: SET_NOTIFICATIONS, value };\n}\n\nexport function setBreakLength(value) {\n  return { type: SET_BREAK_LENGTH, value };\n}\n\nexport function setTimerSound(value) {\n  return { type: SET_TIMER_SOUND, value };\n}\n\nexport function setGoogleClientId(value) {\n  return { type: SET_GOOGLE_CLIENT_ID, value };\n}\n\nexport function setGoogleEnabled(value) {\n  return { type: SET_GOOGLE_ENABLED, value };\n}\n\nexport function setGoogleSignedIn(value) {\n  return { type: SET_GOOGLE_SIGNED_IN, value };\n}\n\nexport function setGoogleCalendar(value) {\n  return { type: SET_GOOGLE_CALENDAR, value };\n}\n\nexport function setColor(colorType, value) {\n  return { type: SET_COLOR, colorType, value };\n}\n\nexport function enqueueSnackbar(notification) {\n  return {\n    type: ENQUEUE_SNACKBAR,\n    notification: {\n      key: new Date().getTime() + Math.random(),\n      ...notification\n    }\n  };\n}\n\nexport function removeSnackbar(key) {\n  return {\n    type: REMOVE_SNACKBAR,\n    key\n  };\n}\n","import { combineReducers } from \"redux\";\nimport {\n  START_TIMER,\n  SET_PURPOSE,\n  SET_POM_LENGTH,\n  SET_BREAK_LENGTH,\n  SETUP_TIMER,\n  TIMER_COMPLETE,\n  SET_NOTIFICATIONS,\n  SET_TIMER_SOUND,\n  REMOVE_SNACKBAR,\n  ENQUEUE_SNACKBAR,\n  SET_GOOGLE_CLIENT_ID,\n  SET_GOOGLE_ENABLED,\n  SET_GOOGLE_SIGNED_IN,\n  SET_GOOGLE_CALENDAR,\n  SET_COLOR,\n  NOTIFY,\n  ADD_TO_CALENDAR\n} from \"./actions\";\nimport { MILLISECONDS_IN_A_MINUTE } from \"./constants\";\n\nexport const initialState = {\n  timer: {\n    length: 25 * MILLISECONDS_IN_A_MINUTE,\n    purpose: \"\",\n    startedAt: null,\n    completedAt: null,\n    completed: false,\n    notified: false,\n    addedToCalendar: false,\n    type: \"pom\"\n  },\n  settings: {\n    pomLengthInMinutes: 25,\n    breakLengthInMinutes: 5,\n    notifications: true,\n    timerSound: \"/alarm.mp3\",\n    minTime: 1 * MILLISECONDS_IN_A_MINUTE,\n    googleApiKey: \"\",\n    googleClientId: \"\",\n    googleEnabled: true,\n    googleSignedIn: false,\n    googleCalendar: \"primary\",\n    colors: { pom: null, breaking: null, action: null }\n  }\n};\n\nfunction timer(state = initialState.timer, action) {\n  switch (action.type) {\n    case START_TIMER:\n      let completedAt = undefined;\n\n      if (state.length) {\n        completedAt = Date.now() + state.length;\n      }\n\n      return {\n        ...state,\n        startedAt: Date.now(),\n        completedAt\n      };\n    case SET_PURPOSE:\n      return { ...state, purpose: action.value };\n\n    case SETUP_TIMER:\n      let newTimerState = { ...initialState.timer };\n      return { ...newTimerState, ...action.timerValues };\n    case NOTIFY:\n      return { ...state, notified: true };\n    case ADD_TO_CALENDAR:\n      return { ...state, addedToCalendar: true };\n    case TIMER_COMPLETE:\n      completedAt = state.completedAt || Date.now();\n      return { ...state, completed: true, completedAt };\n\n    default:\n      return state;\n  }\n}\n\nfunction settings(state = initialState.settings, action) {\n  switch (action.type) {\n    case SET_GOOGLE_CLIENT_ID:\n      return { ...state, googleClientId: action.value };\n    case SET_POM_LENGTH:\n      return { ...state, pomLengthInMinutes: action.value };\n    case SET_BREAK_LENGTH:\n      return { ...state, breakLengthInMinutes: action.value };\n    case SET_NOTIFICATIONS:\n      return { ...state, notifications: action.value };\n    case SET_TIMER_SOUND:\n      return { ...state, timerSound: action.value };\n    case SET_GOOGLE_ENABLED:\n      return { ...state, googleEnabled: action.value };\n    case SET_GOOGLE_SIGNED_IN:\n      return { ...state, googleSignedIn: action.value };\n    case SET_GOOGLE_CALENDAR:\n      return { ...state, googleCalendar: action.value };\n    case SET_COLOR:\n      return {\n        ...state,\n        colors: { ...state.colors, [action.colorType]: action.value }\n      };\n    default:\n      return state;\n  }\n}\n\nfunction notifications(state = [], action) {\n  switch (action.type) {\n    case ENQUEUE_SNACKBAR:\n      return [\n        ...state,\n        {\n          ...action.notification\n        }\n      ];\n    case REMOVE_SNACKBAR:\n      return state.filter(notification => notification.key !== action.key);\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  timer,\n  settings,\n  notifications\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport reducer, { initialState } from \"./reducer\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nexport const configureStore = () => {\n  const persistedState = localStorage.getItem(\"reduxState\")\n    ? JSON.parse(localStorage.getItem(\"reduxState\"))\n    : initialState;\n\n  persistedState.settings.googleSignedIn = false;\n\n  let store = createStore(\n    reducer,\n    persistedState,\n    applyMiddleware(logger, thunk)\n  );\n\n  store.subscribe(() => {\n    localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\n  });\n\n  return store;\n};\n\nexport default configureStore();\n","import store from \"./configureStore\";\nimport { enqueueSnackbar, setGoogleSignedIn, ADD_TO_CALENDAR } from \"./actions\";\nimport { IconButton, Button, TextField, MenuItem } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport styled from \"styled-components\";\n\nconst gapi = window.gapi;\n\nconst Splotch = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n  background-color: ${({ color }) => color};\n`;\n\n// Array of API discovery doc URLs for APIs used by the quickstart\nvar DISCOVERY_DOCS = [\n  \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"\n];\n\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nvar SCOPES = \"https://www.googleapis.com/auth/calendar\";\n\n/**\n *  On load, called to load the auth2 library and API client library.\n */\nfunction handleClientLoad() {\n  gapi.load(\"client:auth2\", initClient);\n}\n\nexport function getAllCalendars() {\n  return gapi.client.calendar.calendarList\n    .list()\n    .getPromise()\n    .then(data => Promise.resolve(data.result.items));\n}\nexport function getAllColors() {\n  return gapi.client.calendar.colors\n    .get({ calendarId: store.getState().settings.googleCalendar })\n    .getPromise()\n    .then(data =>\n      Object.keys(data.result.event).map(id => ({\n        id,\n        color: data.result.event[id].background\n      }))\n    );\n}\n\nexport const GoogleCalendarList = ({ ...props }) => {\n  let [calendars, setCalendars] = useState([]);\n\n  useEffect(() => {\n    getAllCalendars().then(calendars => setCalendars(calendars));\n  }, []);\n\n  return (\n    <TextField\n      select\n      label=\"Calendar\"\n      margin=\"normal\"\n      variant=\"outlined\"\n      fullWidth\n      disabled={calendars.length === 0}\n      {...props}\n    >\n      {calendars.map(({ id, summary, primary }) => (\n        <MenuItem key={id} value={primary ? \"primary\" : id}>\n          {summary}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nexport const GoogleColorList = ({ ...props }) => {\n  let [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    getAllColors().then(colors => setColors(colors));\n  }, []);\n\n  return (\n    <TextField\n      select\n      margin=\"normal\"\n      variant=\"outlined\"\n      fullWidth\n      disabled={colors.length === 0}\n      {...props}\n    >\n      {colors.map(({ id, color }) => (\n        <MenuItem key={id} value={id}>\n          <Splotch color={color}>&nbsp;</Splotch>\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nfunction getApiLogin() {\n  // TODO: if there is no api login then create a snackbar with a link to the settings page?\n\n  return {\n    // apiKey:\n    //   process.env.REACT_APP_GOOGLE_API_KEY ||\n    //   store.getState().settings.googleApiKey,\n    clientId:\n      process.env.REACT_APP_GOOGLE_CLIENT_ID ||\n      store.getState().settings.googleClientId\n  };\n}\n\n/**\n *  Initializes the API client library and sets up sign-in state\n *  listeners.\n */\nfunction initClient() {\n  gapi.client\n    .init({\n      ...getApiLogin(),\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    })\n    .then(function() {\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n      // Handle the initial sign-in state.\n      updateSigninStatus(isSignedIn());\n    })\n    .catch(error => {\n      updateSigninStatus(false, error);\n    });\n}\n\n/**\n *  Called when the signed in status changes, to update the UI\n *  appropriately. After a sign-in, the API is called.\n */\nfunction updateSigninStatus(isSignedIn, error) {\n  if (isSignedIn) {\n    store.dispatch(\n      enqueueSnackbar({\n        message: \"Signed into Google Calendar.\",\n        options: {\n          variant: \"success\"\n        }\n      })\n    );\n  } else {\n    store.dispatch(\n      enqueueSnackbar({\n        message: \"Signed out of Google Calendar\",\n        options: {\n          variant: \"error\",\n          action: [\n            <Button key=\"authorise\" size=\"small\" onClick={signIn}>\n              AUTHORISE\n            </Button>,\n            <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\">\n              <CloseIcon />\n            </IconButton>\n          ]\n        }\n      })\n    );\n  }\n\n  store.dispatch(setGoogleSignedIn(isSignedIn));\n}\n\nexport function signIn() {\n  gapi.auth2.getAuthInstance().signIn();\n}\n\nfunction formatDate(d) {\n  d.setMilliseconds(0);\n  return d.toJSON();\n}\n\nexport function addToCalendar() {\n  return function(dispatch, getState) {\n    let {\n      settings: { googleEnabled, googleCalendar, colors },\n      timer: { purpose, startedAt, completedAt, addedToCalendar, type }\n    } = getState();\n\n    if (!addedToCalendar) {\n      if (!googleEnabled) {\n        return;\n      }\n      // BUG: this won't let retries work.\n      dispatch({ type: ADD_TO_CALENDAR });\n\n      try {\n        var request = gapi.client.calendar.events.insert({\n          calendarId: googleCalendar,\n          resource: {\n            summary: purpose,\n            colorId: colors[type],\n            start: {\n              dateTime: formatDate(new Date(startedAt))\n            },\n            end: {\n              dateTime: formatDate(new Date(completedAt))\n            }\n          }\n        });\n\n        request\n          .getPromise()\n          .then(() => {\n            dispatch(\n              enqueueSnackbar({\n                message: \"Successfully added to Google Calendar!\",\n                options: {\n                  variant: \"success\"\n                }\n              })\n            );\n          })\n          .catch(e => {\n            console.log(e);\n            store.dispatch(\n              enqueueSnackbar({\n                message: \"Something went wrong adding to Google Calendar.\",\n                options: {\n                  variant: \"error\"\n                }\n              })\n            );\n          });\n      } catch (e) {\n        console.log(e);\n        //TODO: add a retry button?\n        store.dispatch(\n          enqueueSnackbar({\n            message: \"Something went wrong adding to Google Calendar.\",\n            options: {\n              variant: \"error\"\n            }\n          })\n        );\n      }\n    }\n  };\n}\n\nexport function isSignedIn() {\n  if (gapi.auth2) {\n    return gapi.auth2.getAuthInstance().isSignedIn.get();\n  } else {\n    return false;\n  }\n}\n\nhandleClientLoad();\n\nexport default gapi;\n","import { Link } from \"react-router-dom\";\nimport { Modal, Paper, IconButton } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nexport const CenteredPaper = styled(Paper)`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  max-width: 100%;\n  width: 600px;\n  padding: 30px;\n`;\nexport const TopRight = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: inline-block;\n`;\n\nexport const ClosableModal = ({ children, ...props }) => {\n  return (\n    <Modal {...props}>\n      <CenteredPaper>\n        <TopRight>\n          <IconButton aria-label=\"Settings\" component={Link} to=\"/\">\n            <CloseIcon color=\"action\" />\n          </IconButton>\n        </TopRight>\n        {children}\n      </CenteredPaper>\n    </Modal>\n  );\n};\n","import React from \"react\";\nimport gapi, { GoogleCalendarList, GoogleColorList } from \"./google\";\nimport {\n  Button,\n  InputAdornment,\n  FormControlLabel,\n  FormHelperText,\n  FormControl,\n  MenuItem,\n  TextField,\n  Typography as TypographyImp,\n  Grid as GridImp,\n  Switch,\n  IconButton,\n  Tooltip\n} from \"@material-ui/core\";\nimport HelpIcon from \"@material-ui/icons/Help\";\n\nimport styled from \"styled-components\";\nimport {\n  setBreakLength,\n  setPomLength,\n  setNotifications,\n  setTimerSound,\n  setGoogleClientId,\n  setGoogleEnabled,\n  setGoogleCalendar,\n  setColor\n} from \"./actions\";\nimport { connect } from \"react-redux\";\nimport { TIMER_SOUNDS } from \"./constants\";\nimport { ClosableModal } from \"./Layout\";\n\nconst Typography = styled(TypographyImp)`\n  margin-top: 20px;\n`;\n\nconst Grid = styled(GridImp)`\n  margin-bottom: 15px !important;\n`;\n\nfunction handleAuthClick(event) {\n  gapi.auth2.getAuthInstance().signIn();\n}\n\nfunction handleSignoutClick(event) {\n  gapi.auth2.getAuthInstance().signOut();\n}\n\n//TODO: the google sign in stuff breaks many things, maybe it should go into redux? As it stands it  doesn't update because it's not in the state.\n\nexport const Settings = ({\n  history,\n  breakLengthInMinutes,\n  pomLengthInMinutes,\n  timerSound,\n  notifications,\n  googleClientId,\n  googleEnabled,\n  googleSignedIn,\n  googleCalendar,\n  colors: { pom, breaking, action },\n  onSetGoogleEnabled,\n  onSetPomLength,\n  onSetBreakLength,\n  onSetNotifications,\n  onSetTimerSound,\n  onSetGoogleClientId,\n  onSetGoogleCalendar,\n  onSetColor\n}) => {\n  return (\n    <ClosableModal open onClose={() => history.push(\"/\")}>\n      <Grid container spacing={8}>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Google Calendar\n            <Switch\n              variant=\"outlined\"\n              checked={googleEnabled}\n              onChange={e => onSetGoogleEnabled(e.target.checked)}\n            />\n          </Typography>\n          {googleEnabled && (\n            <>\n              <Grid container spacing={8}>\n                <Grid item xs={11}>\n                  <TextField\n                    variant=\"outlined\"\n                    value={googleClientId}\n                    onChange={e => onSetGoogleClientId(e.target.value)}\n                    label={\"Client ID\"}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={1}>\n                  <Tooltip title=\"In order to use the google calendar integration you must generate your own client id. It should be restricted to just this URL. Setup should be for javascript in the browser, accessing user data.\">\n                    <IconButton>\n                      <HelpIcon />\n                    </IconButton>\n                  </Tooltip>\n                </Grid>\n              </Grid>\n              {googleSignedIn && (\n                <>\n                  <Grid item>\n                    <GoogleCalendarList\n                      value={googleCalendar}\n                      onChange={e => onSetGoogleCalendar(e.target.value)}\n                    />\n                  </Grid>\n                  <Grid container spacing={8}>\n                    <Grid item md={4} xs={12}>\n                      <GoogleColorList\n                        label={\"Break Color\"}\n                        value={breaking}\n                        onChange={e => onSetColor(\"breaking\", e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item md={4} xs={12}>\n                      <GoogleColorList\n                        label={\"Action Color\"}\n                        value={action}\n                        onChange={e => onSetColor(\"action\", e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item md={4} xs={12}>\n                      <GoogleColorList\n                        label={\"Pom Color\"}\n                        value={pom}\n                        onChange={e => onSetColor(\"pom\", e.target.value)}\n                      />\n                    </Grid>\n                  </Grid>\n                </>\n              )}\n              <Grid item xs={12}>\n                {googleSignedIn ? (\n                  <Button color=\"secondary\" onClick={handleSignoutClick}>\n                    Sign out\n                  </Button>\n                ) : (\n                  <Button color=\"primary\" onClick={handleAuthClick}>\n                    Authorise\n                  </Button>\n                )}\n                <Button\n                  color=\"secondary\"\n                  target=\"_blank\"\n                  href=\"https://console.developers.google.com/start/api?id=calendar\"\n                >\n                  Generate client id\n                </Button>\n              </Grid>\n            </>\n          )}\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Timer\n          </Typography>\n\n          <Grid item md={6} xs={12}>\n            <TextField\n              label=\"Break Length\"\n              variant=\"outlined\"\n              onChange={e => {\n                onSetBreakLength(e.target.value);\n              }}\n              value={breakLengthInMinutes}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">minutes</InputAdornment>\n                )\n              }}\n              type=\"number\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item md={6} xs={12}>\n            <TextField\n              label=\"Pom Length\"\n              variant=\"outlined\"\n              onChange={e => {\n                onSetPomLength(e.target.value);\n              }}\n              value={pomLengthInMinutes}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">minutes</InputAdornment>\n                )\n              }}\n              type=\"number\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              select\n              label=\"Select\"\n              value={timerSound}\n              onChange={e => {\n                onSetTimerSound(e.target.value);\n                new Audio(e.target.value).play();\n              }}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n            >\n              <MenuItem value=\"\" />\n              {TIMER_SOUNDS.map(soundUrl => (\n                <MenuItem key={soundUrl} value={soundUrl}>\n                  {soundUrl}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Grid>\n          <Grid item>\n            <FormControl error={window.Notification.permission === \"denied\"}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    variant=\"outlined\"\n                    checked={notifications}\n                    onChange={e => onSetNotifications(e.target.checked)}\n                  />\n                }\n                label=\"Notifications\"\n              />\n              {window.Notification.permission === \"denied\" && notifications && (\n                <FormHelperText>\n                  Notifications are currently denied, you will have to reset\n                  them in the settings.\n                </FormHelperText>\n              )}\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ClosableModal>\n  );\n};\n\nexport default connect(\n  ({ settings, google }) => ({ ...settings, ...google }),\n  {\n    onSetBreakLength: setBreakLength,\n    onSetPomLength: setPomLength,\n    onSetNotifications: setNotifications,\n    onSetTimerSound: setTimerSound,\n    onSetGoogleClientId: setGoogleClientId,\n    onSetGoogleEnabled: setGoogleEnabled,\n    onSetGoogleCalendar: setGoogleCalendar,\n    onSetColor: setColor\n  }\n)(Settings);\n","import React, { useState, useEffect } from \"react\";\nimport { Typography, TextField } from \"@material-ui/core\";\nimport { MILLISECONDS_IN_A_MINUTE } from \"./constants\";\nimport { connect } from \"react-redux\";\nimport { useInterval } from \"./utils\";\nimport { setPurpose } from \"./actions\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  text-align: center;\n\n  max-width: 600px;\n  width: 100%;\n`;\n\nconst Purpose = styled.div`\n  margin-top: 30px;\n`;\n\nconst PurposeTextField = styled(TextField)`\n  & textarea {\n    color: rgba(0, 0, 0, 0.87);\n    font-size: 3.75rem;\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\n    font-weight: 300;\n    line-height: 1;\n    letter-spacing: -0.00833em;\n    text-align: center;\n    padding-top: 6px;\n    padding-right: 0px;\n    padding-bottom: 7px;\n    padding-left: 0px;\n  }\n`;\n\n//create your forceUpdate hook\nfunction useForceUpdate() {\n  const [value, set] = useState(true); //boolean state\n  return () => set(!value); // toggle the state to force render\n}\n\n// TODO: maybe the timer bit should actually exist outside of the component?\nexport const Timer = ({\n  purpose,\n  startedAt,\n  completedAt,\n  length,\n  onSetPurpose\n}) => {\n  let interval = 100;\n\n  let timerStarted = startedAt && completedAt;\n  let timerComplete = Date.now() >= completedAt;\n  let actionStarted = startedAt && !length;\n  let forceUpdate = useForceUpdate();\n\n  useInterval(\n    () => forceUpdate(),\n    (timerStarted && !timerComplete) || actionStarted ? interval : null\n  );\n\n  // useShortcut(({ key }) => key === \"Enter\", onInvertPlayState);\n\n  let [p, setPurpose] = useState(purpose);\n  // This is a neat way to reset the internal purpose state whenever the external one changes.\n  useEffect(() => setPurpose(purpose), [purpose]);\n\n  let displayTime;\n\n  if (timerStarted) {\n    displayTime = completedAt - Date.now();\n  } else if (actionStarted) {\n    displayTime = Date.now() - startedAt;\n  } else {\n    displayTime = length;\n  }\n\n  displayTime = Math.max(0, displayTime);\n\n  let minutes = Math.floor(displayTime / MILLISECONDS_IN_A_MINUTE);\n  let seconds = Math.floor((displayTime % MILLISECONDS_IN_A_MINUTE) / 1000);\n  let timeString = `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n\n  document.title = `(${timeString}) ${purpose} | Pom Pilot`;\n\n  return (\n    <Container>\n      <Typography variant=\"h1\">{timeString}</Typography>\n      <Purpose>\n        {!purpose ? (\n          <PurposeTextField\n            autoFocus\n            fullWidth\n            multiline\n            // InputLabelProps={{\n            //   shrink: true\n            // }}\n            // rows={2}\n            placeholder=\"What are you doing?\"\n            onChange={e => {\n              setPurpose(e.target.value);\n            }}\n            onKeyPress={e => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                onSetPurpose(p);\n              }\n            }}\n            value={p}\n          />\n        ) : (\n          <Typography variant=\"h2\">{purpose}</Typography>\n        )}\n      </Purpose>\n    </Container>\n  );\n};\n\nexport default connect(\n  ({ timer }) => timer,\n  {\n    onSetPurpose: setPurpose\n  }\n)(Timer);\n","import { useRef, useEffect } from \"react\";\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  const lastRun = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      let timeNow = Date.now();\n      savedCallback.current(timeNow - lastRun.current);\n      lastRun.current = timeNow;\n    }\n    if (delay !== null) {\n      lastRun.current = Date.now();\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function useShortcut(matches, action) {\n  const savedMatches = useRef();\n  const savedAction = useRef();\n\n  useEffect(() => {\n    savedMatches.current = matches;\n    savedAction.current = action;\n  });\n\n  useEffect(() => {\n    function test(e) {\n      if (savedMatches.current(e)) {\n        savedAction.current();\n      }\n    }\n\n    window.addEventListener(\"keydown\", test);\n    return () => window.removeEventListener(\"keydown\", test);\n  });\n}\n","import { connect } from \"react-redux\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"@material-ui/core\";\nimport { startBreak, startPom, startAction } from \"./actions\";\nconst Container = styled.div`\n  position: fixed;\n  bottom: 0%;\n  left: 50%;\n  transform: translate(-50%, -100%);\n`;\n\nexport const Controls = ({ onStartPom, onStartBreak, onStartAction }) => {\n  return (\n    <Container>\n      <Button onClick={onStartPom}>Pom</Button>\n      <Button onClick={onStartAction}>Action</Button>\n      <Button onClick={onStartBreak}>Break</Button>\n      {/* <Button>Coffee</Button> */}\n    </Container>\n  );\n};\n\nexport default connect(\n  null,\n  { onStartPom: startPom, onStartBreak: startBreak, onStartAction: startAction }\n)(Controls);\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport Controls from \"./Controls\";\n\nexport default () => (\n  <>\n    <Timer />\n    <Controls />\n  </>\n);\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-unresolved */\nimport React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withSnackbar } from \"notistack\";\nimport { removeSnackbar } from \"./actions\";\n\nclass Notifier extends React.Component {\n  displayed = [];\n\n  storeDisplayed = id => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  shouldComponentUpdate({ notifications: newSnacks = [] }) {\n    const { notifications: currentSnacks } = this.props;\n    let notExists = false;\n    for (let i = 0; i < newSnacks.length; i += 1) {\n      if (notExists) continue;\n      notExists =\n        notExists ||\n        !currentSnacks.filter(({ key }) => newSnacks[i].key === key).length;\n    }\n    return notExists;\n  }\n\n  componentDidUpdate() {\n    const { notifications = [] } = this.props;\n\n    notifications.forEach(notification => {\n      // Do nothing if snackbar is already displayed\n      if (this.displayed.includes(notification.key)) return;\n      // Display snackbar using notistack\n      this.props.enqueueSnackbar(notification.message, notification.options);\n      // Keep track of snackbars that we've displayed\n      this.storeDisplayed(notification.key);\n      // Dispatch action to remove snackbar from redux store\n      this.props.removeSnackbar(notification.key);\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst mapStateToProps = store => ({\n  notifications: store.notifications\n});\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ removeSnackbar }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withSnackbar(Notifier));\n","import React, { Component } from \"react\";\n\nimport { Route } from \"react-router-dom\";\nimport Settings from \"./Settings\";\nimport TimerInterface from \"./TimerInterface\";\nimport Notifier from \"./Notifier\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { Link } from \"react-router-dom\";\nimport { TopRight } from \"./Layout\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <TopRight>\n          <IconButton aria-label=\"Settings\" component={Link} to=\"/settings\">\n            <SettingsIcon color=\"action\" />\n          </IconButton>\n        </TopRight>\n        <Route path=\"/\" component={TimerInterface} />\n        <Route path=\"/settings\" component={Settings} />\n        <Notifier />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import store from \"./configureStore\";\nimport { timerComplete } from \"./actions\";\n\nexport function manageTimers() {\n  store.getState();\n  if (\n    store.getState().timer.length &&\n    store.getState().timer.startedAt &&\n    Date.now() >= store.getState().timer.completedAt &&\n    !store.getState().timer.completed\n  ) {\n    store.dispatch(timerComplete());\n  }\n}\n\nexport default () => {\n  setInterval(manageTimers, 100);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n  IconButton\n} from \"@material-ui/core\";\nimport { Provider } from \"react-redux\";\nimport store from \"./configureStore\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { SnackbarProvider } from \"notistack\";\nimport timerManager from \"./timerManager\";\n\nimport grey from \"@material-ui/core/colors/grey\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\n\n/** VISUAL */\n\n// TODO: make a logo\n// TODO: scrollable modal\n// TODO: background image?\n\n/** FUNCTIONAL */\n\n// TODO: add the upcoming event button\n\n// TODO: what if a pom has mutliple objectives?\n// TODO: integrate with spotify\n\n//TODO: animate the previous timer upwards and faded out. Probably the easiest way to do this is by making the timers in the redux state an array and then rendering all of them...\n\n// TODO: \"off track\" button that logs to google calendar since the last time completed until now that you were off track. Or maybe even just \"Back track\" where you can label what you did during the last untracked time. maybe timer just automatically picks up the time since the last event? should backtrack go all the way to the last google calendar event or should it go to the last timer? What if there wasn't one?\n\n/** MOBILE */\n\n// BUG: can't construct notification on mobile. This Notification needs a better wrapper\n// TODO: use a service worker for push notifications.\n// TODO: improve mobile setting screen etc.\n\n/** MORE DATA */\n\n// TODO: add ability to track location of work by prompting where you are occasionally\n// TODO: transparency (whether or not time is blocked.\n// TODO: visibility, whether or not other people casn see the event.\n// TODO: add meta data to event with some parseable syntax like ```{timesPaused:1}```\n\n// TODO : alarm doesn't work on github\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: grey,\n    secondary: lightBlue\n  }\n});\n\ntimerManager();\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <Provider store={store}>\n      <SnackbarProvider\n        action={[\n          <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\">\n            <CloseIcon />\n          </IconButton>\n        ]}\n        autoHideDuration={3000}\n      >\n        <Router>\n          <App />\n        </Router>\n      </SnackbarProvider>\n    </Provider>\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}